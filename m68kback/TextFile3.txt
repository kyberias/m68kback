  Expected: collection containing "Foobar 100 200 300"
  But was:  < "Testing 100 200 300", "oobar 100 200 300" >

at NUnit.Framework.CollectionAssert.Contains(IEnumerable collection, Object actual)
at m68kback.test.AllStepsTest.StructsPrg() in C:\Projects\misc\m68kback\m68kback.test\AllStepsTest.cs:line 241


Before register allocation:
_str_copy:

    regdef.l _,_
    sub.l #8,SP
    move.l A6_,A13_
    move.l A5_,A12_
    move.l A4_,A11_
    move.l A3_,A10_
    move.l A2_,A9_
    move.l D7_,D13_
    move.l D6_,D12_
    move.l D5_,D11_
    move.l D4_,D10_
    move.l D3_,D9_
    move.l D2_,D8_
    move.l 4(SP),A7_
    move.l 8(SP),A8_
entry0:

    move.l A8_,0(SP) ; Store %source.addr to stack
    move.l A7_,4(SP) ; Store %dest.addr to stack
    jmp while$cond0
while$cond0:

    move.l 0(SP),A14_ ; Load from stack
    move.l A14_,A15_
    adda.l #1,A15_
    move.l A15_,0(SP) ; Store %source.addr to stack
    move.b (A14_),D14_ ; Load by register address
    cmp.b #0,D14_
    move.b CCR,CCR0_
    move.l CCR0_,CCR
    bne while$body0
    jmp while$end0
while$body0:

    move.l 0(SP),A16_ ; Load from stack
    move.b (A16_),D15_ ; Load by register address
    move.l 4(SP),A17_ ; Load from stack
    move.l A17_,A18_
    adda.l #1,A18_
    move.l A18_,4(SP) ; Store %dest.addr to stack
    move.b D15_,(A17_) ; Store to reg
    jmp while$cond0
while$end0:

    move.l D8_,D2_
    move.l D9_,D3_
    move.l D10_,D4_
    move.l D11_,D5_
    move.l D12_,D6_
    move.l D13_,D7_
    move.l A9_,A2_
    move.l A10_,A3_
    move.l A11_,A4_
    move.l A12_,A5_
    move.l A13_,A6_
    add.l #8,SP
    rts 
========================================
AFTER register allocation and fixes:
_str_copy:

    sub.l #8,SP
    move.l 12(SP),A1
    move.l 16(SP),A0
entry0:

    move.l A0,0(SP) ; Store %source.addr to stack
    move.l A1,4(SP) ; Store %dest.addr to stack
    jmp while$cond0
while$cond0:

    move.l 0(SP),A0 ; Load from stack
    move.l A0,A1
    adda.l #1,A1
    move.l A1,0(SP) ; Store %source.addr to stack
    move.b (A0),D0 ; Load by register address
    cmp.b #0,D0
    bne while$body0
    jmp while$end0
while$body0:

    move.l 0(SP),A0 ; Load from stack
    move.b (A0),D0 ; Load by register address
    move.l 4(SP),A0 ; Load from stack
    move.l A0,A1
    adda.l #1,A1
    move.l A1,4(SP) ; Store %dest.addr to stack
    move.b D0,(A0) ; Store to reg
    jmp while$cond0
while$end0:

    add.l #8,SP
    rts 
Before register allocation:
_main:

    regdef.l _,_
    sub.l #128,SP
    move.l A6_,A12_
    move.l A5_,A11_
    move.l A4_,A10_
    move.l A3_,A9_
    move.l A2_,A8_
    move.l D7_,D14_
    move.l D6_,D13_
    move.l D5_,D12_
    move.l D4_,D11_
    move.l D3_,D10_
    move.l D2_,D9_
    move.l 4(SP),D8_
    move.l 8(SP),A7_
entry1:

    moveq #0,D15_
    move.l D15_,0(SP) ; Store %retval to stack
    move.l A7_,4(SP) ; Store %argv.addr to stack
    move.l D8_,8(SP) ; Store %argc.addr to stack
    move.l SP,A13_
    adda.l #12,A13_
    adda.l #0,A13_
    adda.l #0,A13_
    lea.l __01$$_C__07DNAACEEL_Testing$$AA_,A14_
    move.l A14_,(A13_) ; Store to reg
    move.l SP,A15_
    adda.l #12,A15_
    adda.l #0,A15_
    adda.l #104,A15_
    moveq #100,D16_
    move.l D16_,(A15_) ; Store to reg
    move.l SP,A16_
    adda.l #12,A16_
    adda.l #0,A16_
    adda.l #108,A16_
    moveq #200,D17_
    move.l D17_,(A16_) ; Store to reg
    move.l SP,A17_
    adda.l #12,A17_
    adda.l #0,A17_
    adda.l #112,A17_
    moveq #300,D18_
    move.l D18_,(A17_) ; Store to reg
    move.l SP,A18_
    adda.l #12,A18_
    adda.l #0,A18_
    adda.l #4,A18_
    move.l A18_,A19_
    adda.l #0,A19_
    adda.l #0,A19_
    lea.l __01$$_C__06GCLLLIDK_Foobar$$AA_,A20_
    move.l A20_,-(SP)
    move.l A19_,-(SP)
    jsr _str_copy
    move.l D0_,D19_
    adda.l #8,SP
    move.l SP,A21_
    adda.l #12,A21_
    adda.l #0,A21_
    adda.l #112,A21_
    move.l (A21_),D20_ ; Load by register address
    move.l SP,A22_
    adda.l #12,A22_
    adda.l #0,A22_
    adda.l #108,A22_
    move.l (A22_),D21_ ; Load by register address
    move.l SP,A23_
    adda.l #12,A23_
    adda.l #0,A23_
    adda.l #104,A23_
    move.l (A23_),D22_ ; Load by register address
    move.l SP,A24_
    adda.l #12,A24_
    adda.l #0,A24_
    adda.l #0,A24_
    move.l (A24_),A25_ ; Load by register address
    move.l D20_,-(SP)
    move.l D21_,-(SP)
    move.l D22_,-(SP)
    move.l A25_,-(SP)
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A26_
    move.l A26_,-(SP)
    jsr _printf
    move.l D0_,D23_
    adda.l #20,SP
    move.l SP,A27_
    adda.l #12,A27_
    adda.l #0,A27_
    adda.l #112,A27_
    move.l (A27_),D24_ ; Load by register address
    move.l SP,A28_
    adda.l #12,A28_
    adda.l #0,A28_
    adda.l #108,A28_
    move.l (A28_),D25_ ; Load by register address
    move.l SP,A29_
    adda.l #12,A29_
    adda.l #0,A29_
    adda.l #104,A29_
    move.l (A29_),D26_ ; Load by register address
    move.l SP,A30_
    adda.l #12,A30_
    adda.l #0,A30_
    adda.l #4,A30_
    move.l A30_,A31_
    adda.l #0,A31_
    adda.l #0,A31_
    move.l D24_,-(SP)
    move.l D25_,-(SP)
    move.l D26_,-(SP)
    move.l A31_,-(SP)
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A32_
    move.l A32_,-(SP)
    jsr _printf
    move.l D0_,D27_
    adda.l #20,SP
    moveq #0,D28_
    move.l D28_,D0_
    move.l D9_,D2_
    move.l D10_,D3_
    move.l D11_,D4_
    move.l D12_,D5_
    move.l D13_,D6_
    move.l D14_,D7_
    move.l A8_,A2_
    move.l A9_,A3_
    move.l A10_,A4_
    move.l A11_,A5_
    move.l A12_,A6_
    add.l #128,SP
    rts 
========================================
AFTER register allocation and fixes:
_main:

    sub.l #132,SP
    move.l D7,128(SP) ; Spilled reg D14 store
    move.l 136(SP),D0
    move.l 140(SP),A0
entry1:

    moveq #0,D1
    move.l D1,0(SP) ; Store %retval to stack
    move.l A0,4(SP) ; Store %argv.addr to stack
    move.l D0,8(SP) ; Store %argc.addr to stack
    move.l SP,A1
    adda.l #12,A1
    adda.l #0,A1
    adda.l #0,A1
    lea.l __01$$_C__07DNAACEEL_Testing$$AA_,A0
    move.l A0,(A1) ; Store to reg
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #104,A0
    moveq #100,D0
    move.l D0,(A0) ; Store to reg
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #108,A0
    moveq #200,D0
    move.l D0,(A0) ; Store to reg
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #112,A0
    moveq #300,D0
    move.l D0,(A0) ; Store to reg
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #4,A0
    adda.l #0,A0
    adda.l #0,A0
    lea.l __01$$_C__06GCLLLIDK_Foobar$$AA_,A1
    move.l A1,-(SP)
    move.l A0,-(SP)
    jsr _str_copy
    adda.l #8,SP
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #112,A0
    move.l (A0),D0 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #108,A0
    move.l (A0),D1 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #104,A0
    move.l (A0),D7 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #0,A0
    move.l (A0),A0 ; Load by register address
    move.l D0,-(SP)
    move.l D1,-(SP)
    move.l D7,-(SP)
    move.l A0,-(SP)
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A0
    move.l A0,-(SP)
    jsr _printf
    adda.l #20,SP
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #112,A0
    move.l (A0),D0 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #108,A0
    move.l (A0),D1 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #104,A0
    move.l (A0),D7 ; Load by register address
    move.l SP,A0
    adda.l #12,A0
    adda.l #0,A0
    adda.l #4,A0
    adda.l #0,A0
    adda.l #0,A0
    move.l D0,-(SP)
    move.l D1,-(SP)
    move.l D7,-(SP)
    move.l A0,-(SP)
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A0
    move.l A0,-(SP)
    jsr _printf
    adda.l #20,SP
    moveq #0,D0
    move.l 128(SP),D7 ; Spilled reg D14 load
    add.l #132,SP
    rts 
A0: 0, A1: 0, D0: 0, D1: 0
_main:

A0: 0, A1: 0, D0: 0, D1: 0
    sub.l #132,SP
A0: 0, A1: 0, D0: 0, D1: 0
    move.l D7,128(SP) ; Spilled reg D14 store
A0: 0, A1: 0, D0: 0, D1: 0
    move.l 136(SP),D0
A0: 0, A1: 0, D0: 2, D1: 0
    move.l 140(SP),A0
A0: 37, A1: 0, D0: 2, D1: 0
entry1:

A0: 37, A1: 0, D0: 2, D1: 0
    moveq #0,D1
A0: 37, A1: 0, D0: 2, D1: 0
    move.l D1,0(SP) ; Store %retval to stack
A0: 37, A1: 0, D0: 2, D1: 0
    move.l A0,4(SP) ; Store %argv.addr to stack
A0: 37, A1: 0, D0: 2, D1: 0
    move.l D0,8(SP) ; Store %argc.addr to stack
A0: 37, A1: 0, D0: 2, D1: 0
    move.l SP,A1
A0: 37, A1: 3948, D0: 2, D1: 0
    adda.l #12,A1
A0: 37, A1: 3960, D0: 2, D1: 0
    adda.l #0,A1
A0: 37, A1: 3960, D0: 2, D1: 0
    adda.l #0,A1
A0: 37, A1: 3960, D0: 2, D1: 0
    lea.l __01$$_C__07DNAACEEL_Testing$$AA_,A0
A0: 0, A1: 3960, D0: 2, D1: 0
    move.l A0,(A1) ; Store to reg
A0: 0, A1: 3960, D0: 2, D1: 0
    move.l SP,A0
A0: 3948, A1: 3960, D0: 2, D1: 0
    adda.l #12,A0
A0: 3960, A1: 3960, D0: 2, D1: 0
    adda.l #0,A0
A0: 3960, A1: 3960, D0: 2, D1: 0
    adda.l #104,A0
A0: 4064, A1: 3960, D0: 2, D1: 0
    moveq #100,D0
A0: 4064, A1: 3960, D0: 100, D1: 0
    move.l D0,(A0) ; Store to reg
A0: 4064, A1: 3960, D0: 100, D1: 0
    move.l SP,A0
A0: 3948, A1: 3960, D0: 100, D1: 0
    adda.l #12,A0
A0: 3960, A1: 3960, D0: 100, D1: 0
    adda.l #0,A0
A0: 3960, A1: 3960, D0: 100, D1: 0
    adda.l #108,A0
A0: 4068, A1: 3960, D0: 100, D1: 0
    moveq #200,D0
A0: 4068, A1: 3960, D0: 200, D1: 0
    move.l D0,(A0) ; Store to reg
A0: 4068, A1: 3960, D0: 200, D1: 0
    move.l SP,A0
A0: 3948, A1: 3960, D0: 200, D1: 0
    adda.l #12,A0
A0: 3960, A1: 3960, D0: 200, D1: 0
    adda.l #0,A0
A0: 3960, A1: 3960, D0: 200, D1: 0
    adda.l #112,A0
A0: 4072, A1: 3960, D0: 200, D1: 0
    moveq #300,D0
A0: 4072, A1: 3960, D0: 300, D1: 0
    move.l D0,(A0) ; Store to reg
A0: 4072, A1: 3960, D0: 300, D1: 0
    move.l SP,A0
A0: 3948, A1: 3960, D0: 300, D1: 0
    adda.l #12,A0
A0: 3960, A1: 3960, D0: 300, D1: 0
    adda.l #0,A0
A0: 3960, A1: 3960, D0: 300, D1: 0
    adda.l #4,A0
A0: 3964, A1: 3960, D0: 300, D1: 0
    adda.l #0,A0
A0: 3964, A1: 3960, D0: 300, D1: 0
    adda.l #0,A0
A0: 3964, A1: 3960, D0: 300, D1: 0
    lea.l __01$$_C__06GCLLLIDK_Foobar$$AA_,A1
A0: 3964, A1: 8, D0: 300, D1: 0
    move.l A1,-(SP)
A0: 3964, A1: 8, D0: 300, D1: 0
    move.l A0,-(SP)
A0: 3964, A1: 8, D0: 300, D1: 0
    jsr _str_copy
A0: 3964, A1: 8, D0: 300, D1: 0
_str_copy:

A0: 3964, A1: 8, D0: 300, D1: 0
    sub.l #8,SP
A0: 3964, A1: 8, D0: 300, D1: 0
    move.l 12(SP),A1
A0: 3964, A1: 3964, D0: 300, D1: 0
    move.l 16(SP),A0
A0: 8, A1: 3964, D0: 300, D1: 0
entry0:

A0: 8, A1: 3964, D0: 300, D1: 0
    move.l A0,0(SP) ; Store %source.addr to stack
A0: 8, A1: 3964, D0: 300, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 8, A1: 3964, D0: 300, D1: 0
    jmp while$cond0
A0: 8, A1: 3964, D0: 300, D1: 0
while$cond0:

A0: 8, A1: 3964, D0: 300, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 8, A1: 3964, D0: 300, D1: 0
    move.l A0,A1
A0: 8, A1: 8, D0: 300, D1: 0
    adda.l #1,A1
A0: 8, A1: 9, D0: 300, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 8, A1: 9, D0: 300, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 8, A1: 9, D0: 326, D1: 0
    cmp.b #0,D0
A0: 8, A1: 9, D0: 326, D1: 0
    bne while$body0
A0: 8, A1: 9, D0: 326, D1: 0
while$body0:

A0: 8, A1: 9, D0: 326, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 9, A1: 9, D0: 326, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 9, A1: 9, D0: 367, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3964, A1: 9, D0: 367, D1: 0
    move.l A0,A1
A0: 3964, A1: 3964, D0: 367, D1: 0
    adda.l #1,A1
A0: 3964, A1: 3965, D0: 367, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3964, A1: 3965, D0: 367, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3964, A1: 3965, D0: 367, D1: 0
    jmp while$cond0
A0: 3964, A1: 3965, D0: 367, D1: 0
while$cond0:

A0: 3964, A1: 3965, D0: 367, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 9, A1: 3965, D0: 367, D1: 0
    move.l A0,A1
A0: 9, A1: 9, D0: 367, D1: 0
    adda.l #1,A1
A0: 9, A1: 10, D0: 367, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 9, A1: 10, D0: 367, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 9, A1: 10, D0: 367, D1: 0
    cmp.b #0,D0
A0: 9, A1: 10, D0: 367, D1: 0
    bne while$body0
A0: 9, A1: 10, D0: 367, D1: 0
while$body0:

A0: 9, A1: 10, D0: 367, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 10, A1: 10, D0: 367, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 10, A1: 10, D0: 367, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3965, A1: 10, D0: 367, D1: 0
    move.l A0,A1
A0: 3965, A1: 3965, D0: 367, D1: 0
    adda.l #1,A1
A0: 3965, A1: 3966, D0: 367, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3965, A1: 3966, D0: 367, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3965, A1: 3966, D0: 367, D1: 0
    jmp while$cond0
A0: 3965, A1: 3966, D0: 367, D1: 0
while$cond0:

A0: 3965, A1: 3966, D0: 367, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 10, A1: 3966, D0: 367, D1: 0
    move.l A0,A1
A0: 10, A1: 10, D0: 367, D1: 0
    adda.l #1,A1
A0: 10, A1: 11, D0: 367, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 10, A1: 11, D0: 367, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 10, A1: 11, D0: 367, D1: 0
    cmp.b #0,D0
A0: 10, A1: 11, D0: 367, D1: 0
    bne while$body0
A0: 10, A1: 11, D0: 367, D1: 0
while$body0:

A0: 10, A1: 11, D0: 367, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 11, A1: 11, D0: 367, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 11, A1: 11, D0: 354, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3966, A1: 11, D0: 354, D1: 0
    move.l A0,A1
A0: 3966, A1: 3966, D0: 354, D1: 0
    adda.l #1,A1
A0: 3966, A1: 3967, D0: 354, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3966, A1: 3967, D0: 354, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3966, A1: 3967, D0: 354, D1: 0
    jmp while$cond0
A0: 3966, A1: 3967, D0: 354, D1: 0
while$cond0:

A0: 3966, A1: 3967, D0: 354, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 11, A1: 3967, D0: 354, D1: 0
    move.l A0,A1
A0: 11, A1: 11, D0: 354, D1: 0
    adda.l #1,A1
A0: 11, A1: 12, D0: 354, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 11, A1: 12, D0: 354, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 11, A1: 12, D0: 354, D1: 0
    cmp.b #0,D0
A0: 11, A1: 12, D0: 354, D1: 0
    bne while$body0
A0: 11, A1: 12, D0: 354, D1: 0
while$body0:

A0: 11, A1: 12, D0: 354, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 12, A1: 12, D0: 354, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 12, A1: 12, D0: 353, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3967, A1: 12, D0: 353, D1: 0
    move.l A0,A1
A0: 3967, A1: 3967, D0: 353, D1: 0
    adda.l #1,A1
A0: 3967, A1: 3968, D0: 353, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3967, A1: 3968, D0: 353, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3967, A1: 3968, D0: 353, D1: 0
    jmp while$cond0
A0: 3967, A1: 3968, D0: 353, D1: 0
while$cond0:

A0: 3967, A1: 3968, D0: 353, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 12, A1: 3968, D0: 353, D1: 0
    move.l A0,A1
A0: 12, A1: 12, D0: 353, D1: 0
    adda.l #1,A1
A0: 12, A1: 13, D0: 353, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 12, A1: 13, D0: 353, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 12, A1: 13, D0: 353, D1: 0
    cmp.b #0,D0
A0: 12, A1: 13, D0: 353, D1: 0
    bne while$body0
A0: 12, A1: 13, D0: 353, D1: 0
while$body0:

A0: 12, A1: 13, D0: 353, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 13, A1: 13, D0: 353, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 13, A1: 13, D0: 370, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3968, A1: 13, D0: 370, D1: 0
    move.l A0,A1
A0: 3968, A1: 3968, D0: 370, D1: 0
    adda.l #1,A1
A0: 3968, A1: 3969, D0: 370, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3968, A1: 3969, D0: 370, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3968, A1: 3969, D0: 370, D1: 0
    jmp while$cond0
A0: 3968, A1: 3969, D0: 370, D1: 0
while$cond0:

A0: 3968, A1: 3969, D0: 370, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 13, A1: 3969, D0: 370, D1: 0
    move.l A0,A1
A0: 13, A1: 13, D0: 370, D1: 0
    adda.l #1,A1
A0: 13, A1: 14, D0: 370, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 13, A1: 14, D0: 370, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 13, A1: 14, D0: 370, D1: 0
    cmp.b #0,D0
A0: 13, A1: 14, D0: 370, D1: 0
    bne while$body0
A0: 13, A1: 14, D0: 370, D1: 0
while$body0:

A0: 13, A1: 14, D0: 370, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 14, A1: 14, D0: 370, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 14, A1: 14, D0: 256, D1: 0
    move.l 4(SP),A0 ; Load from stack
A0: 3969, A1: 14, D0: 256, D1: 0
    move.l A0,A1
A0: 3969, A1: 3969, D0: 256, D1: 0
    adda.l #1,A1
A0: 3969, A1: 3970, D0: 256, D1: 0
    move.l A1,4(SP) ; Store %dest.addr to stack
A0: 3969, A1: 3970, D0: 256, D1: 0
    move.b D0,(A0) ; Store to reg
A0: 3969, A1: 3970, D0: 256, D1: 0
    jmp while$cond0
A0: 3969, A1: 3970, D0: 256, D1: 0
while$cond0:

A0: 3969, A1: 3970, D0: 256, D1: 0
    move.l 0(SP),A0 ; Load from stack
A0: 14, A1: 3970, D0: 256, D1: 0
    move.l A0,A1
A0: 14, A1: 14, D0: 256, D1: 0
    adda.l #1,A1
A0: 14, A1: 15, D0: 256, D1: 0
    move.l A1,0(SP) ; Store %source.addr to stack
A0: 14, A1: 15, D0: 256, D1: 0
    move.b (A0),D0 ; Load by register address
A0: 14, A1: 15, D0: 256, D1: 0
    cmp.b #0,D0
A0: 14, A1: 15, D0: 256, D1: 0
    bne while$body0
A0: 14, A1: 15, D0: 256, D1: 0
    jmp while$end0
A0: 14, A1: 15, D0: 256, D1: 0
while$end0:

A0: 14, A1: 15, D0: 256, D1: 0
    add.l #8,SP
A0: 14, A1: 15, D0: 256, D1: 0
    rts 
A0: 14, A1: 15, D0: 256, D1: 0
    adda.l #8,SP
A0: 14, A1: 15, D0: 256, D1: 0
    move.l SP,A0
A0: 3948, A1: 15, D0: 256, D1: 0
    adda.l #12,A0
A0: 3960, A1: 15, D0: 256, D1: 0
    adda.l #0,A0
A0: 3960, A1: 15, D0: 256, D1: 0
    adda.l #112,A0
A0: 4072, A1: 15, D0: 256, D1: 0
    move.l (A0),D0 ; Load by register address
A0: 4072, A1: 15, D0: 300, D1: 0
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 0
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 0
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 0
    adda.l #108,A0
A0: 4068, A1: 15, D0: 300, D1: 0
    move.l (A0),D1 ; Load by register address
A0: 4068, A1: 15, D0: 300, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #104,A0
A0: 4064, A1: 15, D0: 300, D1: 200
    move.l (A0),D7 ; Load by register address
A0: 4064, A1: 15, D0: 300, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    move.l (A0),A0 ; Load by register address
A0: 0, A1: 15, D0: 300, D1: 200
    move.l D0,-(SP)
A0: 0, A1: 15, D0: 300, D1: 200
    move.l D1,-(SP)
A0: 0, A1: 15, D0: 300, D1: 200
    move.l D7,-(SP)
A0: 0, A1: 15, D0: 300, D1: 200
    move.l A0,-(SP)
A0: 0, A1: 15, D0: 300, D1: 200
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A0
A0: 16, A1: 15, D0: 300, D1: 200
    move.l A0,-(SP)
A0: 16, A1: 15, D0: 300, D1: 200
    jsr _printf
Testing 100 200 300
A0: 16, A1: 15, D0: 4, D1: 200
    adda.l #20,SP
A0: 16, A1: 15, D0: 4, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 4, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 4, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 4, D1: 200
    adda.l #112,A0
A0: 4072, A1: 15, D0: 4, D1: 200
    move.l (A0),D0 ; Load by register address
A0: 4072, A1: 15, D0: 300, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #108,A0
A0: 4068, A1: 15, D0: 300, D1: 200
    move.l (A0),D1 ; Load by register address
A0: 4068, A1: 15, D0: 300, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #104,A0
A0: 4064, A1: 15, D0: 300, D1: 200
    move.l (A0),D7 ; Load by register address
A0: 4064, A1: 15, D0: 300, D1: 200
    move.l SP,A0
A0: 3948, A1: 15, D0: 300, D1: 200
    adda.l #12,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3960, A1: 15, D0: 300, D1: 200
    adda.l #4,A0
A0: 3964, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3964, A1: 15, D0: 300, D1: 200
    adda.l #0,A0
A0: 3964, A1: 15, D0: 300, D1: 200
    move.l D0,-(SP)
A0: 3964, A1: 15, D0: 300, D1: 200
    move.l D1,-(SP)
A0: 3964, A1: 15, D0: 300, D1: 200
    move.l D7,-(SP)
A0: 3964, A1: 15, D0: 300, D1: 200
    move.l A0,-(SP)
A0: 3964, A1: 15, D0: 300, D1: 200
    lea.l __01$$_C__0M_NLKJDCPF_$$CFs$5$$CFd$5$$CFd$5$$CFd$$AA_,A0
A0: 16, A1: 15, D0: 300, D1: 200
    move.l A0,-(SP)
A0: 16, A1: 15, D0: 300, D1: 200
    jsr _printf
oobar 100 200 300
A0: 16, A1: 15, D0: 4, D1: 200
    adda.l #20,SP
A0: 16, A1: 15, D0: 4, D1: 200
    moveq #0,D0
A0: 16, A1: 15, D0: 0, D1: 200
    move.l 128(SP),D7 ; Spilled reg D14 load
A0: 16, A1: 15, D0: 0, D1: 200
    add.l #132,SP
A0: 16, A1: 15, D0: 0, D1: 200
    rts 
